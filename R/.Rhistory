print(result)
result<-c(1,1.2,3)
print(resulr)
print(result)
result<-c(1,1.2,3.27)
print(result)
result<-c(1,1.2L,3.27)
print(result)
result<-c(1L,1.2,3.27)
print(result)
inte <- c(2L,3L)
print(inte)
char <- c("krish","maniprabha")
print(char)
type(inte)
typeof(inte)
typeof(char)
typeof(logicals)
length(char)
#Checking for specific type
is.integer(result)
is.integer(char)
is.integer(inte)
is.logical(logicals)
logi <- c(TRUE,FALSE)
is.logical(logi)
print(logi)
typeof(logi)
#Assigning name
c<-5
print(c)
names(inte)<-c("x","y")
print(x)
print(inte)
#List
list("a",55,"krish",55.5)
#List
newvar<-list("a",55,"krish",55.5)
typeof(newvar)
print(newvar)
li2<-list(newvar)
typeof(li2)
print(li2)
str(newvar)
#List
newvar<-list("a",55,"krish",55.5,TRUE) #list() function is used to create a function and it can contain different data types.
#List
newvar<-list("a",55,"krish",55.5) #list() function is used to create a function and it can contain different data types.
li2<-list(newvar) #list of list (can go so on)
print(newvar)
print(li2)
#Finding data type of individual items in a list
str(newvar)
newli <- list(2,2,FALSE)
print(newli)
str(newli)
str(li2)
#Naming lists
d <- list("krish_age"=20,"maniprabha_age"=21)
print(d)
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
today()
today()
now()
ymd("2024-03-16")
#Example
myd("03-2004-16")
myd("Jan-2004-16")
myd("January 20,2004")
myd("January 20th,2004")
myd("January 2004,20th")
mdy("january 20th, 2004")
ymd(20240316)
#Date with time
dmy_hms("14/06/2024 21:38:50")
dmy_hm("14/06/2024 21:40")
r<-dmy_hm("14/06/2024 21:40")
#Conversion of Date to Time
as_date(r)
data.frame(names=c("Krish","Prabha","Nirav","Nira"),age=c("20","21","0","0"))
us<-data.frame(names=c("Krish","Prabha","Nirav","Nira"),age=c("20","21","0","0"))
print(us)
us[2,1]
file.create("new_file.csv")
file.create("temp_file.csv")
file.copy("new_file","temp_file")
file.copy("new_file.csv","temp_file.csv")
file.copy("new_file.csv","test")
unlink("temp_file.csv")
file.create("temp_file.csv")
unlink("temp_file.csv")
matrix(c(3:8),nrow=2)
a<-matrix(c(3:8),ncol = 3)
print(a)
x<-2
y<-5
x>y
z<-3
x>y & x<z
x<y & y>z #True
!TRUE
x>y | x<z
x<-3
if(x>0){
print("x is a positive number")
}
x<-3
if(x>0){
print("x is a positive number")
}
else{
if(x>0){
print("x is a positive number")
}else{
print("x is zero or a negative number")
}
x<-3
if(x>0){
print("x is a positive number")
}else{
print("x is zero or a negative number")
}
x<-0
if(x>0){
print("x is a positive number")
}else{
print("x is zero or a negative number")
}
y<-0
if(y>0){
print("y is a positive number")
} else if(y==0){
print("y is zero")
} else{
print("y is a negative number")
}
y<-0
if(y>0){
print("y is a positive number")
} else if(y==0){
print("y is zero")
} else{
print("y is a negative number")
}
result<-c(1L,1.2,3.27)
inte <- c(2L,3L)#L is used for denoting integer
typeof(inte)  #To identify the type
char <- c("krish","maniprabha")
typeof(char)
logi <- c(TRUE,FALSE)
typeof(logi)
print(logi)
print(char)
print(result)
print(inte)
head(diamonds)
install.packages("tidyverse")
library(tidyverse)
head(diamonds)
glimpse(diamonds)
str(diamonds)
colnames(diamonds)
library(tidyverse)
colnames(diamonds)
head(diamonds)
rename(diamonds,carat_n=carat)
rename(diamonds,cut_n=cut)
head(diamonds)
summarize(diamonds,mean_carat=mean(carat))
ggplot(data=diamonds,aes(x=carat,y=cut))+geom_point()
ggplot(data=diamonds,aes(x=carat,y=cut))+geom_point(aes(color=species))
ggplot(data=diamonds,aes(x=carat,y=cut))+geom_point(aes(color=cut))
ggplot(data=diamonds,aes(x=carat,y=price))+geom_point()
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()+facet_wrap(~cut)
installed.packages()
library(tidyverse)
browseVignettes("tidyverse")
browseVignettes("ggplot2")
data()
ggplot(data=diamonds,aes(x=carat,y=price))+geom_bar()
ggplot(data=diamonds,aes(x=carat,y=price))+geom_point()
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()+facet_wrap(~cut)
ggplot(data=diamonds,aes(x=carat,y=price,copriceor=cut))+geom_point()+facet_wrap(~c)
ggplot(data=diamonds,aes(x=carat,y=price,copriceor=cut))+geom_point()+facet_wrap(~price)
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()+facet_wrap(~price)
ggplot(data=diamonds,aes(x=carat,y=price,color=price))+geom_point()+facet_wrap(~price)
ggplot(data=diamonds,aes(x=carat,y=cut,color=price))+geom_point()+facet_wrap(~price)
ggplot(data=diamonds,aes(x=carat,y=price,color=cut))+geom_point()+facet_wrap(~cut)
installed.packages()
installed.packages()
data()
data("ToothGrowth")
View(ToothGrowth)
install.packages("dplyr")
library(dplyr)
Filtered <- filter(ToothGrowth,dose="0.5")
Filtered <- filter(ToothGrowth,dose=0.5)
Filtered <- filter(ToothGrowth,dose==0.5)
Filtered
arrange(Filtered,len)
arrange(filter(ToothGrowth,dose==0.5),len)
<- ToothGrowth %>%
Filtered_growth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
Filtered_growth
Filtered_growth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
Filtered_growth
plot(1:10)
plot(1:10,main="Sample")
#Plots
barplot(c(2,5),main="Sample")
#Plots
barplot(c(2,5),main="Sample",xlab = "Products",ylab = "Price",sub = "sub-title")
barplot(r(2,5),main="Sample",xlab = "Products",ylab = "Price",sub = "sub-title")
#Plots
barplot(c(2,5),
horiz = TRUE
main="Sample",
#Plots
barplot(c(2,5),
horiz = TRUE,
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title")
#Plots
barplot(c(2,5),
# horiz = TRUE,
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title")
#Plots
barplot(c(2,5),
# horiz = TRUE,
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange")
#Plots
barplot(c(2,5),
# horiz = TRUE,
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue")
barplot(c(2,5),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue"
font.main=2)
barplot(c(2,5),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=2)
barplot(c(2,5),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4)
barplot(c(2,5),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4,
cex.main=4)
barplot(c(2,5),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4,
cex.main=2)
barplot(c(2,5,3,9,1,2,2,4),
# horiz = TRUE,   Used for creating horizontal bars
main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4,
cex.main=2)
barplot(c(2,5,3,9,1,2,2,4))
title(main="Sample",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4,
cex.main=2)
barplot(c(2,5,3,9,1,2,2,4))
x <- 1:10; y<-x*x
plot(x,y,col.axis="blue")
x <- 1:10; y<-x*x
plot(x,y,col.axis="blue")
title(main="Example",
xlab = "Products",
ylab = "Price",
sub = "sub-title",
col.main="orange",
col.lab="red",
col.sub="blue",
font.main=4,
cex.main=2)
Product <- 1:10; Price <-x*x
plot(x,y,col.axis="blue")
title(main="Example",
sub = "sub-title",
col.main="orange",
col.sub="blue",
font.main=4,
cex.main=2)
Product <- 1:10; Price <-x*x
plot(Product,Price,col.axis="blue")
title(main="Example",
sub = "sub-title",
col.main="orange",
col.sub="blue",
font.main=4,
cex.main=2)
Product <- 1:10; Price <-x*x
plot(Product,Price,col.axis="blue")
title(main="Example",
sub = "sub-title",
col.main="orange",
col.sub="blue",
col.lab="red"
font.main=4,
Product <- 1:10; Price <-x*x
plot(Product,Price,col.axis="blue")
title(main="Example",
sub = "sub-title",
col.main="orange",
col.sub="blue",
font.main=4,
cex.main=2)
par(
# Change the colors
col.main="red", col.lab="blue", col.sub="black",
# Titles in italic and bold
font.main=4, font.lab=4, font.sub=4,
# Change font size
cex.main=2, cex.lab=1.7, cex.sub=1.2
)
barplot(c(2,5), main="TMain title",
xlab="X axis title",
ylab="Y axis title",
sub="Sub title")
view(diamonds)
library(tidyverse)
View(diamonds)
data("diamonds")
View(diamonds)
head(diamonds)
str(diamonds)
colnames(diamonds)
mutate(diamonds,carat_new=carat*100)
names <- c("krish","neke","jegan","maha")
age <- c(20,21,21,20)
people <- data.frame(names,age)
people
str(people)
glimpse(people)
summary(glimpse)
summary(glimpse())
help("glimpse")
example("glimpse")
glimpse(people)
str(people)
us<-data.frame(names=c("Krish","Prabha","Nirav","Nira"),age=c("20","21","0","0"))
print(us)
us[2,1]
view(diamonds)
as_tibble(diamonds)
data()
data("mtcars")
force(mtcars)
mtcars
head(mtcars)
colnames(mtcars)
readr_example()
library(tidyverse)
readr_example()
read_csv(readr_example("mtcars.csv"))
read.csv(readr_example("mtcars.csv"))
read_csv(readr_example("mtcars.csv"))
library(readxl)
readxl_example()
read_excel(readxl_example("type-me.xlsx"))
excel_sheets()
excel_sheets("type-me.xlsx")
excel_sheets(readxl_example("type-me.xlsx"))
readr_example()
read_csv(readr_example("mtcars.csv"))
excel_sheets(readxl_example("type-me.xlsx"))
read_excel(readxl_example("type-me.xlsx"))
read_excel(readxl_example("type-me.xlsx"),sheet = "text_coercion")
reading <- read_excel(readxl_example("type-me.xlsx"))
reading
reading <- readxl_example("type-me.xlsx")
reading
read_excel(reading)
readxl_example() #excel sheets
reading <- readxl_example("datasets.xlsx")
read_excel(reading)
excel_sheets(reading)
read_excel(reading,sheet = "iris")
read_excel(reading,sheet = "quakes")
read_excel(reading,sheet = 2)
read_excel(reading,sheet = 1)
read_excel(reading,n_max = 4)
read_excel(reading,range = B2:D3)
read_excel(reading,range = "B2:D3")
read_excel(reading,range = "B2:D4")
read_excel(reading,range = "B2:D3")
read_excel(reading,range = "B2:D2")
read_excel(reading,range = "B2:D4")
read_excel(reading,cell_rows("B2:D4"))
read_excel(reading,cell_rows(1:4))
read_excel(reading,range=cell_rows(1:4))
read_excel(reading,range=cell_cols("B2:D4"))
read_excel(reading,range=cell_cols("B:D"))
